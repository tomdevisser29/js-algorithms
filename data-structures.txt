This file contains helpful notes on data structures.

# Data structures

## Arrays

Arrays store all items contiguously (right next to each other) in memory. When a
new item is added and the next memory slot isn’t free, all items may need to be
moved to a new location in memory to make room.

## Linked lists

In a linked list, each item stores a reference (or pointer) to the next item. The
items can be located anywhere in memory, avoiding the need for a large block of
consecutive memory or moving existing items.

## Arrays versus linked lists

The downside of linked lists is that you can't access an item directly—you have
to start at the beginning and follow the links one by one until you reach it
(sequential access). This makes linked lists great for reading items sequentially,
but terrible for random access. Arrays, on the other hand, are ideal for accessing
elements at arbitrary positions since you can jump straight to any index.

## Stacks

Stacks are very simple data structures, often used for call stacks. You can only
delete items from, or add items to, the top of the stack. Every function  in a
call stack takes up some memory, so beware for stacks that get too tall. You can
refactor it to use a loop, or use tail recursion instead.

## Hash functions and hash tables

### Hash functions

A hash function is a function where you put in a string (or other type of data)
and you get back a number. It maps strings to numbers. There are two
requirements:
1. It needs to be consistent—every time you put in the same data, you should get
the same number;
2. It should map different data to different numbers.

The number returned can be used as the index to store, and later retrieve, that
data in an array.

### Hash tables

Putting hash functions together with arrays creates a data structure called a
hash table. They're smarter than arrays or lists, because they store some extra
logic. This makes them one of the most useful complex data structures.

Examples of hash tables in languages are dictionaries in Python, or associative
arrays in PHP.

Hash tables are great when you want to create a mapping from one thing to
another thing, when you often have to look things up and when you need to
prevent duplicate entries. Examples are phone books, caching (e.g. mapping a URL
to data on the webpage), or DNS tables.

## Graphs

A graph models a set of connections. Graphs are made up of nodes and edges. A
node can be directly connected to many other nodes, called its neighbours.

## Queue

Queues are similar to stacks. You can't access random elements, only enqueue and
dequeue. The queue is called a FIFO data structure; first in, first out. In
contrast, a stack is LIFO; last in, first out.